/*
From https://medium.com/@rafaelacioly/construindo-uma-api-restful-com-go-d6007e4faff6
From https://www.soberkoder.com/swagger-go-api-swaggo/
*/
package main

import (
	"database/sql"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/codegangsta/negroni"
	"github.com/gorilla/mux"
	_ "github.com/lib/pq"
	"github.com/praiakov/webapi/core"
	"github.com/praiakov/webapi/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/praiakov/webapi/web/handlers"
	httpSwagger "github.com/swaggo/http-swagger"
)

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @termsOfService http://swagger.io/terms/

func main() {
	// programmatically set swagger info
	docs.SwaggerInfo.Title = "Swagger Person API"
	docs.SwaggerInfo.Description = "This is a sample server Person server."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = "localhost:4000"
	docs.SwaggerInfo.BasePath = "/v1"
	docs.SwaggerInfo.Schemes = []string{"http"}

	conexao := "user=postgres dbname=webapi-example password=### sslmode=disable"
	db, err := sql.Open("postgres", conexao)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	service := core.NewService(db)

	r := mux.NewRouter()

	n := negroni.New(
		negroni.NewLogger(),
	)

	handlers.MakePersonHandlers(r, n, service)
	http.Handle("/", r)
	r.PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

	srv := &http.Server{
		ReadTimeout:  30 * time.Second,
		WriteTimeout: 30 * time.Second,
		Addr:         ":4000",
		Handler:      http.DefaultServeMux,
		ErrorLog:     log.New(os.Stderr, "logger: ", log.Lshortfile),
	}
	err = srv.ListenAndServe()
	if err != nil {
		log.Fatal(err)
	}
}
